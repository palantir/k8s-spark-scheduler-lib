// Copyright (c) 2019 Palantir Technologies. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/palantir/k8s-spark-scheduler-lib/pkg/apis/scaler/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DemandLister helps list Demands.
// All objects returned here must be treated as read-only.
type DemandLister interface {
	// List lists all Demands in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Demand, err error)
	// Demands returns an object that can list and get Demands.
	Demands(namespace string) DemandNamespaceLister
	DemandListerExpansion
}

// demandLister implements the DemandLister interface.
type demandLister struct {
	indexer cache.Indexer
}

// NewDemandLister returns a new DemandLister.
func NewDemandLister(indexer cache.Indexer) DemandLister {
	return &demandLister{indexer: indexer}
}

// List lists all Demands in the indexer.
func (s *demandLister) List(selector labels.Selector) (ret []*v1alpha1.Demand, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Demand))
	})
	return ret, err
}

// Demands returns an object that can list and get Demands.
func (s *demandLister) Demands(namespace string) DemandNamespaceLister {
	return demandNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DemandNamespaceLister helps list and get Demands.
// All objects returned here must be treated as read-only.
type DemandNamespaceLister interface {
	// List lists all Demands in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Demand, err error)
	// Get retrieves the Demand from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Demand, error)
	DemandNamespaceListerExpansion
}

// demandNamespaceLister implements the DemandNamespaceLister
// interface.
type demandNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Demands in the indexer for a given namespace.
func (s demandNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Demand, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Demand))
	})
	return ret, err
}

// Get retrieves the Demand from the indexer for a given namespace and name.
func (s demandNamespaceLister) Get(name string) (*v1alpha1.Demand, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("demand"), name)
	}
	return obj.(*v1alpha1.Demand), nil
}
